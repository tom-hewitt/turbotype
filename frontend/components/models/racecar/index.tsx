"use client";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 race.glb --transform --types
*/

import * as THREE from "three";
import React from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { Euler, Vector3 } from "@react-three/fiber";
import { ToonMaterial } from "../../materials/ToonMaterial";

type GLTFResult = GLTF & {
  nodes: {
    Mesh_body: THREE.Mesh;
    Mesh_body_1: THREE.Mesh;
    Mesh_body_2: THREE.Mesh;
    Mesh_body_3: THREE.Mesh;
    Mesh_wheel_frontLeft: THREE.Mesh;
    Mesh_wheel_frontLeft_1: THREE.Mesh;
    Mesh_wheel_frontLeft_2: THREE.Mesh;
  };
  materials: {
    paintRed: THREE.MeshStandardMaterial;
    plastic: THREE.MeshStandardMaterial;
    window: THREE.MeshStandardMaterial;
    _defaultMat: THREE.MeshStandardMaterial;
    carTire: THREE.MeshStandardMaterial;
    paintYellow: THREE.MeshStandardMaterial;
  };
};

const BodyMaterial = () => {
  return <ToonMaterial color="#4a4a4a" />;
};

export function RaceCar(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "/race-transformed.glb"
  ) as unknown as GLTFResult;

  return (
    <group {...props} dispose={null}>
      <group position={[0, 0.1, 0]}>
        <mesh geometry={nodes.Mesh_body.geometry}>
          <ToonMaterial color="#b51414" />
        </mesh>
        <mesh
          geometry={nodes.Mesh_body_1.geometry}
          material={materials.plastic}
        >
          <BodyMaterial />
        </mesh>
        <mesh geometry={nodes.Mesh_body_2.geometry} material={materials.window}>
          <ToonMaterial color="#b7ebed" />
        </mesh>
        <mesh
          geometry={nodes.Mesh_body_3.geometry}
          material={materials._defaultMat}
        >
          <BodyMaterial />
        </mesh>
      </group>
      <Wheel
        nodes={nodes}
        position={[-0.35, 0.3, 0.88]}
        rotation={[-Math.PI, 0, -Math.PI]}
      />
      <Wheel nodes={nodes} position={[0.35, 0.3, 0.88]} />
      <Wheel
        nodes={nodes}
        position={[-0.35, 0.3, -0.64]}
        rotation={[-Math.PI, 0, -Math.PI]}
      />
      <Wheel nodes={nodes} position={[0.35, 0.3, -0.64]} />
    </group>
  );
}

const Wheel = ({
  nodes,
  position,
  rotation,
}: {
  nodes: GLTFResult["nodes"];
  position?: Vector3;
  rotation?: Euler;
}) => {
  return (
    <group position={position} rotation={rotation}>
      <mesh geometry={nodes.Mesh_wheel_frontLeft.geometry}>
        <ToonMaterial color="#242424" />
      </mesh>
      <mesh geometry={nodes.Mesh_wheel_frontLeft_1.geometry}>
        <BodyMaterial />
      </mesh>
      <mesh geometry={nodes.Mesh_wheel_frontLeft_2.geometry}>
        <ToonMaterial color="#ebbc3b" />
      </mesh>
    </group>
  );
};

useGLTF.preload("/race-transformed.glb");
